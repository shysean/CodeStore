package test.base.concurrency;import java.util.ArrayList;import java.util.concurrent.ExecutionException;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;import org.junit.After;import org.junit.Before;import org.junit.Test;import sean.base.concurrency.TaskWithResult;public class TaskWithResultTest {	@Before	public void setUp() throws Exception {	}	@After	public void tearDown() throws Exception {	}	/**	 * submit()方法将产生一个Future对象,它用Callable返回结果的特定类型进行了参数化.	 */	@Test	public void callableDemo() {		ExecutorService exec = Executors.newCachedThreadPool();				ArrayList<Future<String>> results = new ArrayList<Future<String>>();				for(int i=0; i<10; i++){			// submit();			results.add(exec.submit(new TaskWithResult(i)));		}				for(Future<String> fs : results){			try {				// isDone()用来查询Future是否已经完成.				System.out.println(fs.isDone());								// get()方法来获取结果,如果isDone==false,该方法将阻塞,				// 直到结果准备就绪.				System.out.println(fs.get());			} catch (InterruptedException e) {				e.printStackTrace();			} catch (ExecutionException e) {				e.printStackTrace();			} finally{				exec.shutdown();			}		}	}}